function draw_board do
  // This function draws the game board
  // Set the board variables
  set board_x_offset to 5
  set board_y_offset to board_x_offset
  set board_width to 100 - board_x_offset * 2
  set board_height to board_width
  // Game board
  rectangle(board_x_offset, board_y_offset, board_width, board_height)
  // Horizontal lines
  line(board_x_offset, board_width/3 + board_y_offset, board_width + board_x_offset, board_width/3 + board_y_offset)
  line(board_x_offset, (board_width/3) * 2 + board_y_offset, board_width + board_x_offset, (board_width/3) * 2 + board_y_offset)
  // Vertical lines
  line(board_width/3 + board_x_offset, board_y_offset, board_width/3 + board_x_offset, board_height + board_y_offset)
  line((board_width/3) * 2 + board_x_offset, board_y_offset, (board_width/3) * 2 + board_x_offset, board_height + board_y_offset)  
end


function get_centre with coord do
  // Get the centre of a celle given its row-column coordinates
  // Coordinate example [2,2] ---> cell in the middle of the board

  // Set the board and cell variables
  set board_x_offset to 5
  set board_y_offset to board_x_offset
  set board_width to 100 - board_x_offset * 2
  set cell_size to board_width / 3

  // Calculate the centre x and centre y of the cell
  log(coord)
  set centre_x to board_x_offset + (coord[2] - 1) * cell_size + cell_size / 2
  set centre_y to board_y_offset + (coord[1] - 1) * cell_size + cell_size / 2
  
  return [centre_x, centre_y]
end


function draw_cross with coord, colour do
  // Draw the crosses on the board
  // Input: row-column coordinates of the board, colour for the stroke
  stroke_color_hex(colour)
  set centre to get_centre(coord)
  set cross_width to 10
  line(centre[1]-cross_width, centre[2]-cross_width, centre[1]+cross_width, centre[2]+cross_width)
  line(centre[1]-cross_width, centre[2]+cross_width, centre[1]+cross_width, centre[2]-cross_width)
end


function draw_circle with coord, colour do
  // Draw the circles on the board
  // Input: row-column coordinates of the board, colour for the stroke
  stroke_color_hex(colour)
  set radius to 10
  set centre to get_centre(coord)
  circle(centre[1], centre[2], radius)
end


function ai_move do
  return [2,3]
end

function draw_moves with moves, colour do
  for each move in moves indexed by index do
    // REMOVED the "?" handling here
    if index % 2 == 0 do
      draw_cross(move, colour)
    else do
      draw_circle(move, colour)
    end
  end
end


function draw_draw with moves do
// Draws a draw game by drawing the moves in grey colour
// and drawing a square announcing the draw
  draw_moves(moves, "gray")
  fill_color_rgba(96, 79, 205, 0.85)
  rectangle(0,0,100,100)
  write("The game was a draw!")
end


function get_string_coordinates with moves do
  set string_coordinates to []
  set str_coord to []
  for each move in moves do
    // Directly convert numerical coordinates
    change str_coord to convert_numerical_coord_to_string(move)
    change string_coordinates to push(string_coordinates, str_coord)
  end
  return string_coordinates
end

function convert_numerical_coord_to_string with num_coord do
  // Handle unexpected "?" input gracefully
  if num_coord == "?" do
    log "Warning: Received '?' in numerical conversion function"
    return "??"
  end
  
  return concatenate(my#number_to_string(num_coord[1]), my#number_to_string(num_coord[2]))
end


function is_invalid_move with coordinates do
  // Checks whether a move is valid or not by checking if
  // there are already occupied cells in the coordinates

  // Initialise the seen coordinates, the coordinates
  // that have already been seen
  set seen_coordinates to [] 

  // Convert a list of lists of coordinate pairs to their
  // string equivalent using the helper function "get_string_coordinates"
  change coordinates to get_string_coordinates(coordinates)

  // Check if the coordinate is already present
  for each coordinate in coordinates do
  // If so, raise a visual error and exit the loop
    if my#contains(seen_coordinates, coordinate) do
      fill_color_rgba(200, 0, 0, 0.85)
      rectangle(0,0,100,100)
      write("Invalid move!")
      return true
      break
  // If the coordinate is not present, push it into the seen list
    else do
      change seen_coordinates to push(seen_coordinates, coordinate)
    end
  end
  return false
end


function check_player_win with player_numerical_moves, all_winning_combinations_strings do
  // player_numerical_moves is a list of [row,col] pairs, e.g., [[1,1], [1,2], [1,3]]
  // all_winning_combinations_strings is a list of string-based combos, e.g., [["11","12","13"], ...]

  if my#length(player_numerical_moves) < 3 do
    return false // Not enough moves to win
  end

  // Create a list of the player's moves as strings (e.g., ["11", "12", "13"]) for easy checking
  set player_string_moves to []
  for each num_move in player_numerical_moves do
    change player_string_moves to push(player_string_moves, convert_numerical_coord_to_string(num_move))
  end

  set cell1_is_in_combo to 0
  set cell2_is_in_combo to 0
  set cell3_is_in_combo to 0
  for each string_combo in all_winning_combinations_strings do
    // string_combo is a list of 3 strings, e.g., ["11", "12", "13"]
    change cell1_is_in_combo to my#contains(player_string_moves, string_combo[1])
    change cell2_is_in_combo to my#contains(player_string_moves, string_combo[2])
    change cell3_is_in_combo to my#contains(player_string_moves, string_combo[3])

    if cell1_is_in_combo and cell2_is_in_combo and cell3_is_in_combo do
      // Player has this winning string_combo. Now find the corresponding numerical coordinates.
      set actual_winning_numerical_coords to []
      set p_str_coord to 0
      for each p_num_coord in player_numerical_moves do
        change p_str_coord to convert_numerical_coord_to_string(p_num_coord)
        // Check if this player's move is part of the winning string_combo
        if p_str_coord == string_combo[1] or p_str_coord == string_combo[2] or p_str_coord == string_combo[3] do
          change actual_winning_numerical_coords to push(actual_winning_numerical_coords, p_num_coord)
        end
      end
      // We expect exactly 3 coordinates for a winning line
      if my#length(actual_winning_numerical_coords) == 3 do
         return actual_winning_numerical_coords // Return list of [r,c] win coords
      else do
        // This case should ideally not happen if logic is correct and no duplicate moves
        log "Error: Found winning combo but couldn't retrieve 3 unique numerical coords."
      end
    end
  end

  return false // No winning line found for this player
end


function who_is_winner with moves do
  set noughts_moves_coords to [] // Will store numerical coords like [[1,1], [2,1]]
  set crosses_moves_coords to [] // Will store numerical coords

  // Separate moves based on player turn (Crosses 'x' on even indices 2,4,6...)
  for each move in moves indexed by idx do
    if idx % 2 == 0 do // Crosses' turn
      change crosses_moves_coords to push(crosses_moves_coords, move)
    else do // Noughts' turn
      change noughts_moves_coords to push(noughts_moves_coords, move)
    end
  end

  // Define all possible winning combinations as strings
  set winning_combinations_as_strings to [
    ["11", "12", "13"], // Row 1
    ["21", "22", "23"], // Row 2
    ["31", "32", "33"], // Row 3
    ["11", "21", "31"], // Column 1
    ["12", "22", "32"], // Column 2
    ["13", "23", "33"], // Column 3
    ["11", "22", "33"], // Diagonal (top-left to bottom-right)
    ["13", "22", "31"]  // Diagonal (top-right to bottom-left)
  ]

  // Check if Crosses ('x') have a winning combination
  set crosses_win_line_numerical to check_player_win(crosses_moves_coords, winning_combinations_as_strings)
  if crosses_win_line_numerical != false do
    // crosses_win_line_numerical is the list of 3 numerical coords, e.g., [[1,1],[1,2],[1,3]]
    return ["x", crosses_win_line_numerical]
  end

  // Check if Noughts ('o') have a winning combination
  set noughts_win_line_numerical to check_player_win(noughts_moves_coords, winning_combinations_as_strings)
  if noughts_win_line_numerical != false do
    // noughts_win_line_numerical is the list of 3 numerical coords
    return ["o", noughts_win_line_numerical]
  end

  // If no player has won yet
  return false
end


function draw_winner with winner_symbol, all_moves, winning_line_numerical_coords do
  // winner_symbol is "x" or "o"
  // all_moves is the original list of all moves like [[1,1], [2,2], ...]
  // winning_line_numerical_coords is like [[1,1], [1,2], [1,3]]

  // 1. Turn all the x's and o's to a light grey.
  draw_moves(all_moves, "gray")

  // 2. Display the winner announcement message
  fill_color_rgba(96, 79, 205, 0.85) // Background for message
  rectangle(0,0,100,100)
  write(concatenate("The ", winner_symbol, "'s won!")) // Text message

  // 3. Highlight the winning row/column/diagonal in purple.
  set purple_color to "#604fcd"

  for each coord_to_highlight in winning_line_numerical_coords do
    if winner_symbol == "x" do
      draw_cross(coord_to_highlight, purple_color)
    else if winner_symbol == "o" do // Assuming winner_symbol can only be "x" or "o" here
      draw_circle(coord_to_highlight, purple_color)
    end
  end
end


function run_game with moves do
  log moves
  set processed_moves to []
  for each move in moves do
    if move == "?" do
      change processed_moves to push(processed_moves, ai_move())
    else do
      change processed_moves to push(processed_moves, move)
    end
  end

  draw_moves(processed_moves, "black")
  
  if is_invalid_move(processed_moves) do
    return
  end
  
  set game_status to who_is_winner(processed_moves)

  if game_status != false do
    set winner to game_status[1]
    set winning_line to game_status[2]
    draw_winner(winner, processed_moves, winning_line)
  else if my#length(processed_moves) == 9 do
    draw_draw(processed_moves)
  end
end

draw_board()
